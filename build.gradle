/*
 * Copyright 2015-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'com.github.ben-manes.versions' version "$versions_updates_version"
    id 'com.jfrog.artifactory' version '4.13.0' apply false
    id 'com.jfrog.bintray' version '1.8.5' apply false
}

subprojects {
    apply plugin: "org.jetbrains.kotlin.jvm"
    dependencies {
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version")
        implementation("io.strikt:strikt-core:$strikt_version") //assertion lib
    }
}

allprojects {

    group 'io.rsocket.tck'
    version '0.0.1-SNAPSHOT'

    repositories {
        jcenter()
        mavenCentral()
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xuse-experimental=kotlin.time.ExperimentalTime"
            ]
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xuse-experimental=kotlin.time.ExperimentalTime"
            ]
        }
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter:$junit_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testRuntime("org.junit.vintage:junit-vintage-engine:$junit_version")
        testImplementation("org.assertj:assertj-core:$assertj_version")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
        implementation("io.netty:netty-buffer:$netty_version")
    }
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}
